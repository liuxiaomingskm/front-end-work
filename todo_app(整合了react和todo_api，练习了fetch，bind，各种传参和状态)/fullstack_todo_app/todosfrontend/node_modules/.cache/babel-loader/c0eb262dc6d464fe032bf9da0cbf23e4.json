{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js\";\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nimport * as apiCalls from './api';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  async loadTodos() {\n    let todos = await apiCalls.getTodos();\n    /* console.log(\"todos:\", todos);//直接就是todos数组了 貌似then提取value出来 并以参数传进去 response的整个过程需要再查验 */\n\n    this.setState({\n      todos\n    });\n  }\n\n  async addTodo(val) {\n    let newTodo = await apiCalls.createTodo(val);\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n\n  async deleteTodo(id) {\n    await apiCalls.removeTodo(id);\n    const todos = this.state.todos.filter(todo => todo._id !== id);\n    this.setState({\n      todos: todos\n    });\n  }\n\n  toggleTodo(todo) {\n    let updateTodo = apiCalls.updateTodo(todo);\n    const todos = this.state.todos.map(t => t._id === updateTodo._id ? updateTodo : t);\n    this.setState({\n      todos: todos\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => /*#__PURE__*/React.createElement(TodoItem, Object.assign({\n      key: t._id\n    }, t, {\n      onDelete: this.deleteTodo.bind(this, t._id) // 这里不但需要绑定this 还需要传入每个todoItem的id来删除该todoItem 所以this后加额外参数， 该参数会放置于定义函数的所有参数前面\n      ,\n      onToggle: this.toggleTodo.bind(this, t),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    })));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \" TodoList! \"), /*#__PURE__*/React.createElement(TodoForm, {\n      addTodo: this.addTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, todos));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js"],"names":["React","Component","TodoItem","TodoForm","apiCalls","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","getTodos","setState","val","newTodo","createTodo","deleteTodo","id","removeTodo","filter","todo","_id","toggleTodo","updateTodo","map","t","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,OAA1B;;AAIA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC7BK,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAC;AADK,KAAb;AAGA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDC,EAAAA,kBAAkB,GAAE;AAClB,SAAKC,SAAL;AACD;;AAEF,QAAMA,SAAN,GAAiB;AACd,QAAIJ,KAAK,GAAG,MAAML,QAAQ,CAACU,QAAT,EAAlB;AAEH;;AACC,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACC;;AAED,QAAMC,OAAN,CAAcM,GAAd,EAAkB;AACjB,QAAIC,OAAO,GAAG,MAAMb,QAAQ,CAACc,UAAT,CAAoBF,GAApB,CAApB;AACD,SAAKD,QAAL,CAAc;AAACN,MAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EAAsBQ,OAAtB;AAAR,KAAd;AAEC;;AAED,QAAME,UAAN,CAAiBC,EAAjB,EAAoB;AAElB,UAAMhB,QAAQ,CAACiB,UAAT,CAAoBD,EAApB,CAAN;AACA,UAAMX,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBa,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaJ,EAA7C,CAAd;AACA,SAAKL,QAAL,CAAc;AAACN,MAAAA,KAAK,EAACA;AAAP,KAAd;AACC;;AAGHgB,EAAAA,UAAU,CAACF,IAAD,EAAM;AACf,QAAIG,UAAU,GAAItB,QAAQ,CAACsB,UAAT,CAAoBH,IAApB,CAAlB;AACC,UAAMd,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBkB,GAAjB,CAAsBC,CAAC,IAClCA,CAAC,CAACJ,GAAF,KAAUE,UAAU,CAACF,GAAtB,GAA4BE,UAA5B,GAAwCE,CAD5B,CAAd;AAGE,SAAKb,QAAL,CAAc;AAACN,MAAAA,KAAK,EAACA;AAAP,KAAd;AAEH;;AAEDoB,EAAAA,MAAM,GAAE;AACJ,UAAMpB,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBkB,GAAjB,CAAsBC,CAAD,iBACjC,oBAAC,QAAD;AACA,MAAA,GAAG,EAAEA,CAAC,CAACJ;AADP,OAEII,CAFJ;AAGA,MAAA,QAAQ,EAAI,KAAKT,UAAL,CAAgBR,IAAhB,CAAqB,IAArB,EAA2BiB,CAAC,CAACJ,GAA7B,CAHZ,CAG8C;AAH9C;AAIA,MAAA,QAAQ,EAAI,KAAKC,UAAL,CAAgBd,IAAhB,CAAqB,IAArB,EAA2BiB,CAA3B,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADY,CAAd;AAQF,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADA,eAEA,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAI,KAAKlB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCD,KADD,CAHA,CADF;AAWD;;AA/D4B;;AAkEjC,eAAeJ,QAAf","sourcesContent":["import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nimport * as apiCalls from './api';\n\n\n\nclass TodoList extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        todos:[]\n      }\n      this.addTodo = this.addTodo.bind(this);\n    }\n    \n    componentWillMount(){\n      this.loadTodos();\n    }\n    \n   async loadTodos(){\n      let todos = await apiCalls.getTodos();\n    \n   /* console.log(\"todos:\", todos);//直接就是todos数组了 貌似then提取value出来 并以参数传进去 response的整个过程需要再查验 */\n    this.setState({todos});\n    }\n    \n    async addTodo(val){\n     let newTodo = await apiCalls.createTodo(val);\n    this.setState({todos: [...this.state.todos, newTodo]\n      })\n    }\n    \n    async deleteTodo(id){\n      \n      await apiCalls.removeTodo(id);\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({todos:todos})\n      }\n    \n    \n    toggleTodo(todo){\n     let updateTodo =  apiCalls.updateTodo(todo);\n      const todos = this.state.todos.map( t =>\n        (t._id === updateTodo._id)? updateTodo: t\n        );\n        this.setState({todos:todos});\n      \n    }\n    \n    render(){\n        const todos = this.state.todos.map((t) => (\n          <TodoItem\n          key={t._id}\n          {...t}\n          onDelete = {this.deleteTodo.bind(this, t._id)}// 这里不但需要绑定this 还需要传入每个todoItem的id来删除该todoItem 所以this后加额外参数， 该参数会放置于定义函数的所有参数前面\n          onToggle = {this.toggleTodo.bind(this, t)}\n          />\n          ))\n      return (\n        <div>\n        <h1> TodoList! </h1>\n        <TodoForm addTodo = {this.addTodo}/>\n        <ul>\n        {todos}\n      </ul>\n        </div>\n        )\n          \n            \n    }\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}