{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js\";\n\n/* global fetch */\n\n/* global Headers */\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nconst APIURL = 'api/todos';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  loadTodos() {\n    fetch(APIURL).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errMessage: \"Please try again later, server is not responding.\"\n          };\n          throw err;\n        }\n      }\n\n      console.log('resp:', resp);\n      console.log('typeofResp', typeof resp);\n      console.log(\"resp.json:\", resp.json());\n      return resp.json();\n    }).then(todos => {\n      console.log('todos', todos);\n      return this.setState({\n        todos\n      });\n    });\n  }\n\n  addTodo(val) {\n    fetch(APIURL, {\n      method: 'post',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({\n        name: val\n      }) //这里不能直接传val 因为api需要的是body 体现为{name: val} 况且这里要字符串化\n\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server is not responding.'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(todos => this.setState({\n      todos\n    }));\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => /*#__PURE__*/React.createElement(TodoItem, Object.assign({\n      key: t._id\n    }, t, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    })));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \" TodoList! \"), /*#__PURE__*/React.createElement(TodoForm, {\n      addTodo: this.addTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, todos));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js"],"names":["React","Component","TodoItem","TodoForm","APIURL","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","fetch","then","resp","ok","status","json","data","err","errorMessage","message","errMessage","console","log","setState","val","method","headers","Headers","body","JSON","stringify","name","render","map","t","_id"],"mappings":"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","sourcesContent":["/* global fetch */\n/* global Headers */\nimport React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nconst APIURL = 'api/todos';\nclass TodoList extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        todos:[]\n      }\n      this.addTodo = this.addTodo.bind(this);\n    }\n    \n    componentWillMount(){\n      this.loadTodos();\n    }\n    \n    loadTodos(){\n      fetch(APIURL)\n      .then(resp =>{ \n        if (!resp.ok){\n          if (resp.status >= 400  && resp.status < 500){\n            return resp.json().then(data => {\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err = {errMessage :\"Please try again later, server is not responding.\"}\n            throw err;\n          }\n        }\n        console.log('resp:',resp);\n        console.log('typeofResp', typeof(resp));\n        console.log(\"resp.json:\", resp.json());\n        return resp.json();\n      \n    })\n    .then(todos => {\n      console.log('todos', todos);\n      return this.setState({todos})});\n    }\n    \n    addTodo(val){\n      fetch(APIURL,{\n        method: 'post',\n        headers: new Headers({\n          'Content-Type':'application/json'\n        }),\n        body:JSON.stringify({name:val})  //这里不能直接传val 因为api需要的是body 体现为{name: val} 况且这里要字符串化\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n      .then(todos => this.setState({todos}));\n    }\n    \n    render(){\n        const todos = this.state.todos.map((t) => (\n          <TodoItem\n          key={t._id}\n          {...t}\n          />\n          ))\n      return (\n        <div>\n        <h1> TodoList! </h1>\n        <TodoForm addTodo = {this.addTodo}/>\n        <ul>\n        {todos}\n      </ul>\n        </div>\n        )\n          \n            \n    }\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}