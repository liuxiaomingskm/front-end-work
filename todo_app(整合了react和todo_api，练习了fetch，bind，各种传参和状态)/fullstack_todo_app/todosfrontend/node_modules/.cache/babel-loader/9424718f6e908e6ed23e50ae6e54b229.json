{"ast":null,"code":"/* global fetch */\nconst APIURL = 'api/todos/';\nexport async function getTodos() {\n  return fetch(APIURL).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: \"Please try again later, server is not responding.\"\n        };\n        throw err;\n      }\n    }\n    /*\n    console.log('resp:',resp); //resp是一个一长串的object 含有status code， type, url等等各种key\n    console.log('typeofResp', typeof(resp)); //类型是object\n    console.log(\"resp.json:\", resp.clone().json()); //这里必须是clone resp.json只能出现一次 返回的是一个promise 含有promise Value, promise Status */\n\n\n    return resp.json();\n  });\n}\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      name: val\n    }) //这里不能直接传val 因为api需要的是body 体现为{name: val} 况且这里要字符串化\n\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later, server is not responding.'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function removeTodo(id) {\n  const deleteURL = APIURL + id;\n  return fetch(deleteURL, {\n    method: 'delete'\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later, server is not responding.'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function updateTodo(todo) {\n  const updateURL = APIURL + todo._id;\n  return fetch(updateURL, {\n    method: 'put',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      completed: !todo.completed\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later, server is not responding.'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}","map":{"version":3,"sources":["/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/api.js"],"names":["APIURL","getTodos","fetch","then","resp","ok","status","json","data","err","errorMessage","message","errMessage","createTodo","val","method","headers","Headers","body","JSON","stringify","name","removeTodo","id","deleteURL","updateTodo","todo","updateURL","_id","completed"],"mappings":"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","sourcesContent":["/* global fetch */\nconst APIURL = 'api/todos/';\n\nexport async function getTodos(){\n    return fetch(APIURL)\n      .then(resp =>{ \n        if (!resp.ok){\n          if (resp.status >= 400  && resp.status < 500){\n            return resp.json().then(data => {\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err = {errMessage :\"Please try again later, server is not responding.\"}\n            throw err;\n          }\n        }\n        /*\n        console.log('resp:',resp); //resp是一个一长串的object 含有status code， type, url等等各种key\n        console.log('typeofResp', typeof(resp)); //类型是object\n        console.log(\"resp.json:\", resp.clone().json()); //这里必须是clone resp.json只能出现一次 返回的是一个promise 含有promise Value, promise Status */\n        return resp.json();\n      \n    })\n}\nexport async function createTodo(val){\n     return fetch(APIURL,{\n        method: 'post',\n        headers: new Headers({\n          'Content-Type':'application/json'\n        }),\n        body:JSON.stringify({name:val})  //这里不能直接传val 因为api需要的是body 体现为{name: val} 况且这里要字符串化\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n}\n\nexport async function removeTodo(id){\n    const deleteURL = APIURL + id;\n       return  fetch(deleteURL,{\n        method: 'delete'\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n}\nexport async function updateTodo(todo){\n    const updateURL = APIURL + todo._id;\n      return   fetch(updateURL,{\n        method: 'put',\n        headers: new Headers({\n          'Content-Type': 'application/json',\n        }),\n        body: JSON.stringify({completed: !todo.completed})\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n  \n}"]},"metadata":{},"sourceType":"module"}