{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js\";\n\n/* global fetch */\n\n/* global Headers */\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nconst APIURL = 'api/todos/';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  loadTodos() {\n    fetch(APIURL).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errMessage: \"Please try again later, server is not responding.\"\n          };\n          throw err;\n        }\n      }\n      /*\n      console.log('resp:',resp); //resp是一个一长串的object 含有status code， type, url等等各种key\n      console.log('typeofResp', typeof(resp)); //类型是object\n      console.log(\"resp.json:\", resp.clone().json()); //这里必须是clone resp.json只能出现一次 返回的是一个promise 含有promise Value, promise Status */\n\n\n      return resp.json();\n    }).then(todos => {\n      /* console.log(\"todos:\", todos);//直接就是todos数组了 貌似then提取value出来 并以参数传进去 response的整个过程需要再查验 */\n      this.setState({\n        todos\n      });\n    });\n  }\n\n  addTodo(val) {\n    fetch(APIURL, {\n      method: 'post',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({\n        name: val\n      }) //这里不能直接传val 因为api需要的是body 体现为{name: val} 况且这里要字符串化\n\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server is not responding.'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(newTodo => {\n      this.setState({\n        todos: [...this.state.todos, newTodo]\n      });\n    });\n  }\n\n  deleteTodo(id) {\n    const deleteURL = APIURL + id;\n    fetch(deleteURL, {\n      method: 'delete'\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server is not responding.'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(() => {\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({\n        todos: todos\n      });\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => /*#__PURE__*/React.createElement(TodoItem, Object.assign({\n      key: t._id\n    }, t, {\n      onDelete: this.deleteTodo.bind(this, t._id) // 这里不但需要绑定this 还需要传入每个todoItem的id来删除该todoItem 所以this后加额外参数， 该参数会放置于定义函数的所有参数前面\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    })));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \" TodoList! \"), /*#__PURE__*/React.createElement(TodoForm, {\n      addTodo: this.addTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, todos));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js"],"names":["React","Component","TodoItem","TodoForm","APIURL","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","fetch","then","resp","ok","status","json","data","err","errorMessage","message","errMessage","setState","val","method","headers","Headers","body","JSON","stringify","name","newTodo","deleteTodo","id","deleteURL","filter","todo","_id","render","map","t"],"mappings":"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","sourcesContent":["/* global fetch */\n/* global Headers */\nimport React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nconst APIURL = 'api/todos/';\nclass TodoList extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        todos:[]\n      }\n      this.addTodo = this.addTodo.bind(this);\n    }\n    \n    componentWillMount(){\n      this.loadTodos();\n    }\n    \n    loadTodos(){\n      fetch(APIURL)\n      .then(resp =>{ \n        if (!resp.ok){\n          if (resp.status >= 400  && resp.status < 500){\n            return resp.json().then(data => {\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err = {errMessage :\"Please try again later, server is not responding.\"}\n            throw err;\n          }\n        }\n        /*\n        console.log('resp:',resp); //resp是一个一长串的object 含有status code， type, url等等各种key\n        console.log('typeofResp', typeof(resp)); //类型是object\n        console.log(\"resp.json:\", resp.clone().json()); //这里必须是clone resp.json只能出现一次 返回的是一个promise 含有promise Value, promise Status */\n        return resp.json();\n      \n    })\n    .then(todos => {\n   /* console.log(\"todos:\", todos);//直接就是todos数组了 貌似then提取value出来 并以参数传进去 response的整个过程需要再查验 */\n    this.setState({todos})});\n    }\n    \n    addTodo(val){\n      fetch(APIURL,{\n        method: 'post',\n        headers: new Headers({\n          'Content-Type':'application/json'\n        }),\n        body:JSON.stringify({name:val})  //这里不能直接传val 因为api需要的是body 体现为{name: val} 况且这里要字符串化\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n      .then(newTodo => {\n        this.setState({todos: [...this.state.todos, newTodo]})\n      })\n    }\n    \n    deleteTodo(id){\n      const deleteURL = APIURL + id;\n         fetch(deleteURL,{\n        method: 'delete'\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n      .then(() => {\n        const todos = this.state.todos.filter(todo => todo._id !== id)\n        this.setState({todos:todos})\n      })\n    }\n    \n    render(){\n        const todos = this.state.todos.map((t) => (\n          <TodoItem\n          key={t._id}\n          {...t}\n          onDelete = {this.deleteTodo.bind(this, t._id)}// 这里不但需要绑定this 还需要传入每个todoItem的id来删除该todoItem 所以this后加额外参数， 该参数会放置于定义函数的所有参数前面\n          />\n          ))\n      return (\n        <div>\n        <h1> TodoList! </h1>\n        <TodoForm addTodo = {this.addTodo}/>\n        <ul>\n        {todos}\n      </ul>\n        </div>\n        )\n          \n            \n    }\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}