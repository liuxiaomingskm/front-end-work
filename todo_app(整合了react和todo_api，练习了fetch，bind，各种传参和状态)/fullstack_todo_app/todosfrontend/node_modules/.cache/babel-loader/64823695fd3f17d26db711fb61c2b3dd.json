{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js\";\n\n/* global fetch */\n\n/* global Headers */\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nimport * as apiCalls from './api';\nconst APIURL = 'api/todos/';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  async loadTodos() {\n    let todos = await apiCalls.getTodos();\n    /* console.log(\"todos:\", todos);//直接就是todos数组了 貌似then提取value出来 并以参数传进去 response的整个过程需要再查验 */\n\n    this.setState({\n      todos\n    });\n  }\n\n  async addTodo(val) {\n    let newTodo = await apiCalls.createTodo(val);\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n\n  deleteTodo(id) {\n    const deleteURL = APIURL + id;\n    fetch(deleteURL, {\n      method: 'delete'\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server is not responding.'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(() => {\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({\n        todos: todos\n      });\n    });\n  }\n\n  toggleTodo(todo) {\n    const updateURL = APIURL + todo._id;\n    fetch(updateURL, {\n      method: 'put',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({\n        completed: !todo.completed\n      })\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later, server is not responding.'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(updateTodo => {\n      const todos = this.state.todos.map(t => t._id === updateTodo._id ? updateTodo : t);\n      this.setState({\n        todos: todos\n      });\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => /*#__PURE__*/React.createElement(TodoItem, Object.assign({\n      key: t._id\n    }, t, {\n      onDelete: this.deleteTodo.bind(this, t._id) // 这里不但需要绑定this 还需要传入每个todoItem的id来删除该todoItem 所以this后加额外参数， 该参数会放置于定义函数的所有参数前面\n      ,\n      onToggle: this.toggleTodo.bind(this, t),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    })));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \" TodoList! \"), /*#__PURE__*/React.createElement(TodoForm, {\n      addTodo: this.addTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, todos));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/home/ec2-user/environment/fullstack_todo_app/todosfrontend/src/TodoList.js"],"names":["React","Component","TodoItem","TodoForm","apiCalls","APIURL","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","getTodos","setState","val","newTodo","createTodo","deleteTodo","id","deleteURL","fetch","method","then","resp","ok","status","json","data","err","errorMessage","message","filter","todo","_id","toggleTodo","updateURL","headers","Headers","body","JSON","stringify","completed","updateTodo","map","t","render"],"mappings":";;AAAA;;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,OAA1B;AACA,MAAMC,MAAM,GAAG,YAAf;;AAGA,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAC7BM,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAC;AADK,KAAb;AAGA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDC,EAAAA,kBAAkB,GAAE;AAClB,SAAKC,SAAL;AACD;;AAEF,QAAMA,SAAN,GAAiB;AACd,QAAIJ,KAAK,GAAG,MAAMN,QAAQ,CAACW,QAAT,EAAlB;AAEH;;AACC,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACC;;AAED,QAAMC,OAAN,CAAcM,GAAd,EAAkB;AACjB,QAAIC,OAAO,GAAG,MAAMd,QAAQ,CAACe,UAAT,CAAoBF,GAApB,CAApB;AACD,SAAKD,QAAL,CAAc;AAACN,MAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EAAsBQ,OAAtB;AAAR,KAAd;AAEC;;AAEDE,EAAAA,UAAU,CAACC,EAAD,EAAI;AACZ,UAAMC,SAAS,GAAGjB,MAAM,GAAGgB,EAA3B;AACGE,IAAAA,KAAK,CAACD,SAAD,EAAW;AACjBE,MAAAA,MAAM,EAAE;AADS,KAAX,CAAL,CAGFC,IAHE,CAGGC,IAAI,IAAI;AACZ,UAAI,CAACA,IAAI,CAACC,EAAV,EAAa;AACX,YAAID,IAAI,CAACE,MAAL,IAAe,GAAf,IAAsBF,IAAI,CAACE,MAAL,GAAc,GAAxC,EAA4C;AAC1C,iBAAOF,IAAI,CAACG,IAAL,GAAYJ,IAAZ,CAAiBK,IAAI,IAAG;AAC7B,gBAAIC,GAAG,GAAG;AAACC,cAAAA,YAAY,EAAEF,IAAI,CAACG;AAApB,aAAV;AACA,kBAAMF,GAAN;AACD,WAHM,CAAP;AAID,SALD,MAKO;AACL,cAAIA,GAAG,GAAI;AAACC,YAAAA,YAAY,EAAE;AAAf,WAAX;AACA,gBAAMD,GAAN;AACD;AACF;;AACD,aAAOL,IAAI,CAACG,IAAL,EAAP;AACD,KAhBE,EAiBFJ,IAjBE,CAiBG,MAAM;AACV,YAAMf,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBwB,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaf,EAA7C,CAAd;AACA,WAAKL,QAAL,CAAc;AAACN,QAAAA,KAAK,EAACA;AAAP,OAAd;AACD,KApBE;AAqBJ;;AAED2B,EAAAA,UAAU,CAACF,IAAD,EAAM;AACd,UAAMG,SAAS,GAAGjC,MAAM,GAAG8B,IAAI,CAACC,GAAhC;AACGb,IAAAA,KAAK,CAACe,SAAD,EAAW;AACjBd,MAAAA,MAAM,EAAE,KADS;AAEjBe,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,wBAAgB;AADG,OAAZ,CAFQ;AAKjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,SAAS,EAAE,CAACT,IAAI,CAACS;AAAlB,OAAf;AALW,KAAX,CAAL,CAOFnB,IAPE,CAOGC,IAAI,IAAI;AACZ,UAAI,CAACA,IAAI,CAACC,EAAV,EAAa;AACX,YAAID,IAAI,CAACE,MAAL,IAAe,GAAf,IAAsBF,IAAI,CAACE,MAAL,GAAc,GAAxC,EAA4C;AAC1C,iBAAOF,IAAI,CAACG,IAAL,GAAYJ,IAAZ,CAAiBK,IAAI,IAAG;AAC7B,gBAAIC,GAAG,GAAG;AAACC,cAAAA,YAAY,EAAEF,IAAI,CAACG;AAApB,aAAV;AACA,kBAAMF,GAAN;AACD,WAHM,CAAP;AAID,SALD,MAKO;AACL,cAAIA,GAAG,GAAI;AAACC,YAAAA,YAAY,EAAE;AAAf,WAAX;AACA,gBAAMD,GAAN;AACD;AACF;;AACD,aAAOL,IAAI,CAACG,IAAL,EAAP;AACD,KApBE,EAqBFJ,IArBE,CAqBIoB,UAAD,IAAgB;AACpB,YAAMnC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBoC,GAAjB,CAAsBC,CAAC,IACpCA,CAAC,CAACX,GAAF,KAAUS,UAAU,CAACT,GAAtB,GAA4BS,UAA5B,GAAwCE,CAD1B,CAAd;AAGA,WAAK/B,QAAL,CAAc;AAACN,QAAAA,KAAK,EAACA;AAAP,OAAd;AACD,KA1BE;AA2BJ;;AAEDsC,EAAAA,MAAM,GAAE;AACJ,UAAMtC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBoC,GAAjB,CAAsBC,CAAD,iBACjC,oBAAC,QAAD;AACA,MAAA,GAAG,EAAEA,CAAC,CAACX;AADP,OAEIW,CAFJ;AAGA,MAAA,QAAQ,EAAI,KAAK3B,UAAL,CAAgBR,IAAhB,CAAqB,IAArB,EAA2BmC,CAAC,CAACX,GAA7B,CAHZ,CAG8C;AAH9C;AAIA,MAAA,QAAQ,EAAI,KAAKC,UAAL,CAAgBzB,IAAhB,CAAqB,IAArB,EAA2BmC,CAA3B,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADY,CAAd;AAQF,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADA,eAEA,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAI,KAAKpC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCD,KADD,CAHA,CADF;AAWD;;AAtG4B;;AAyGjC,eAAeJ,QAAf","sourcesContent":["/* global fetch */\n/* global Headers */\nimport React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nimport * as apiCalls from './api';\nconst APIURL = 'api/todos/';\n\n\nclass TodoList extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        todos:[]\n      }\n      this.addTodo = this.addTodo.bind(this);\n    }\n    \n    componentWillMount(){\n      this.loadTodos();\n    }\n    \n   async loadTodos(){\n      let todos = await apiCalls.getTodos();\n    \n   /* console.log(\"todos:\", todos);//直接就是todos数组了 貌似then提取value出来 并以参数传进去 response的整个过程需要再查验 */\n    this.setState({todos});\n    }\n    \n    async addTodo(val){\n     let newTodo = await apiCalls.createTodo(val);\n    this.setState({todos: [...this.state.todos, newTodo]\n      })\n    }\n    \n    deleteTodo(id){\n      const deleteURL = APIURL + id;\n         fetch(deleteURL,{\n        method: 'delete'\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n      .then(() => {\n        const todos = this.state.todos.filter(todo => todo._id !== id)\n        this.setState({todos:todos})\n      })\n    }\n    \n    toggleTodo(todo){\n      const updateURL = APIURL + todo._id;\n         fetch(updateURL,{\n        method: 'put',\n        headers: new Headers({\n          'Content-Type': 'application/json',\n        }),\n        body: JSON.stringify({completed: !todo.completed})\n      })\n      .then(resp => {\n        if (!resp.ok){\n          if (resp.status >= 400 && resp.status < 500){\n            return resp.json().then(data =>{\n              let err = {errorMessage: data.message};\n              throw err;\n            })\n          } else {\n            let err  = {errorMessage: 'Please try again later, server is not responding.'};\n            throw err;\n          }\n        }\n        return resp.json();\n      })\n      .then((updateTodo) => {\n        const todos = this.state.todos.map( t =>\n        (t._id === updateTodo._id)? updateTodo: t\n        )\n        this.setState({todos:todos})\n      })\n    }\n    \n    render(){\n        const todos = this.state.todos.map((t) => (\n          <TodoItem\n          key={t._id}\n          {...t}\n          onDelete = {this.deleteTodo.bind(this, t._id)}// 这里不但需要绑定this 还需要传入每个todoItem的id来删除该todoItem 所以this后加额外参数， 该参数会放置于定义函数的所有参数前面\n          onToggle = {this.toggleTodo.bind(this, t)}\n          />\n          ))\n      return (\n        <div>\n        <h1> TodoList! </h1>\n        <TodoForm addTodo = {this.addTodo}/>\n        <ul>\n        {todos}\n      </ul>\n        </div>\n        )\n          \n            \n    }\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}